{
	"info": {
		"_postman_id": "e7244336-4de8-4eec-800e-17a9c903740a",
		"name": "Notes-API-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36545936"
	},
	"item": [
		{
			"name": "add notes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should have 201 value', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('data berhasil ditambah');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"})\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"     \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"title\": \"Catatan A\",\r\n        \"tags\": [\"Android\", \"Web\"],\r\n        \"body\": \"Isi dari catatan A\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "get notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the syntax for pm.response calls\r",
							"pm.test('response status should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test('response body should have object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('status');\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson).to.have.property('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"    pm.expect(data).to.have.property('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes.length).to.be.at.least(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "get specified note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should have 200 value', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data')\r",
							"    pm.expect(responseJson.data).to.be.an('object')\r",
							"})\r",
							"pm.test('response body data should contain note object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data } = responseJson\r",
							"\r",
							"    pm.expect(data).to.have.own.property('note')\r",
							"    pm.expect(data.note).to.be.an('object')\r",
							"})\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data:{ note } } = responseJson\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId')\r",
							"    const expectedTitle = 'Catatan A'\r",
							"    const expectedTags = ['Android', 'Web']\r",
							"    const expectedBody = 'Isi dari catatan A'\r",
							"\r",
							"    pm.expect(note).to.haveOwnProperty('id')\r",
							"    pm.expect(note.id).to.equals(expectedId)\r",
							"    pm.expect(note).to.haveOwnProperty('title')\r",
							"    pm.expect(note.title).to.equals(expectedTitle)\r",
							"    pm.expect(note).to.haveOwnProperty('tags')\r",
							"    pm.expect(note.tags).to.eql(expectedTags)\r",
							"    pm.expect(note).to.haveOwnProperty('body')\r",
							"    pm.expect(note.body).to.equals(expectedBody)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should have 200 value', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test('response header Content-Type should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"pm.test('response body should have correct value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message')\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diupdate')\r",
							"})\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"\r",
							"    pm.sendRequest(`localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated data should contain the latest data', () => {\r",
							"                const responseJson = response.json()\r",
							"                const { data: { note } } = responseJson\r",
							"\r",
							"                const expectedTitle = 'Catatan A Revised'\r",
							"                const expectedTags = ['Android', 'Web']\r",
							"                const expectedBody = 'Isi dari Catatan A Revised'\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle)\r",
							"                pm.expect(note.tags).to.eql(expectedTags)\r",
							"                pm.expect(note.body).to.equals(expectedBody)\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"title\": \"Catatan A Revised\",\r\n        \"tags\": [\"Android\", \"Web\"],\r\n        \"body\": \"Isi dari Catatan A Revised\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status should have 200 value', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test('response header Content-Type should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"pm.test('response body should have correct value and property', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message')\r",
							"    pm.expect(responseJson.message).to.equals('data berhasil dihapus')\r",
							"})\r",
							"pm.test('when request the delete note', () => {\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"    pm.sendRequest(`localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404)\r",
							"\r",
							"                const responseJson = response.json()\r",
							"\r",
							"                pm.expect(responseJson.status).to.equals('fail')\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan')\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}